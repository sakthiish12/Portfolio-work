#pragma once
#ifndef PARTICLESYSTEM_H
#define PARTICLESYSTEM_H

#include "ECSComponent.h"
#include "../../../AssetManager/AssetManager.h"
#include "../Systems/Graphics/Be_descriptors.hpp"
namespace BE
{
	class ParticleSystem : public IECSComponent
	{
	public:
		// Particle generated by the system
		struct Particle
		{
			Particle(glm::vec4 const& pos, glm::vec4 const& color, glm::vec4 const& vel, float size, float lifeTime)
				:
				pos(pos), color(color), vel(vel),
				size(size), lifeTime(lifeTime)
			{}

			// Particle is Updated each frame (Movement and life duration)
			void Update(float deltaTime)
			{
				pos += vel * deltaTime;
				lifeTime -= deltaTime;
			}

			bool IsDead() const
			{
				return lifeTime <= 0.f;
			}

			glm::vec4 pos = {};
			glm::vec4 color = {};
			glm::vec4 vel = { };

			float size = 0.f;
			float lifeTime = 0.f;
		};

	public:
		static constexpr auto max_particles_v = 1000;
		glm::vec4 pos = {};
		glm::vec4 color = {};
		glm::vec4 vel = {};
		float particleSize = 0.f;
		float lifetime = 0.f;
		int particleCount = 0; // added member variable
		std::vector<Particle> particles;

	public:
		ParticleSystem() : particleCount(0)
		{
			//particles.push_back(Particle(glm::vec4{ 0,0,0,1 }, glm::vec4{ 1,1,1,1 }, glm::vec4{ 0,0,0, 0 }, 5, 10.f));
		}
		~ParticleSystem() override = default;
		ParticleSystem(const ParticleSystem& rhs) noexcept;
		ParticleSystem(ParticleSystem&& rhs) noexcept;
		ParticleSystem& operator=(const ParticleSystem& rhs) noexcept;
		ParticleSystem& operator=(ParticleSystem&& rhs) noexcept;

		glm::vec4 const& getPos() const;
		glm::vec4 const& getColor() const;
		float getAlpha() const;
		glm::vec4 const& getVel() const;
		int getParticleCount() const;
		float getParticleSize() const;
		float getLifeTime() const;

		bool getHasTexturesChanged();

		void setHasTexturesChanged(bool b);

		void addTexturesToUpdateList(BeDescriptorSetLayout& setLayout, VkDescriptorImageInfo& blankImage, BEID textureToUse);

		void UpdateParticleSystem(float deltaTime, int desiredCount);

		//void UpdateParticleSystem(float deltaTime);

		std::vector<Particle> GetParticles() const;
		bool hasTexturesChanged{ true };
		void setPos(glm::vec4 const&);
		void setColor(glm::vec4 const&);
		inline void setAlpha(float);
		void setVel(glm::vec4 const&);
		void setParticleCount(int count);
		//inline void setParticleCount(float);
		inline void setParticleSize(float);
		inline void setLifeTime(float);

		std::vector<VkDescriptorSet>& getDescriptorSets();
		std::vector<VkWriteDescriptorSet>& getWrites();

		void updateDescriptorSet(BeDevice& device);
		void InitializeForRendering(BeDescriptorSetLayout& setLayout, BeDescriptorPool& pool, VkDescriptorImageInfo& blankImage, BEID textureToUs);
		void AddFireParticles(std::vector<BE::ParticleSystem>& particleSystems);
		void InitializeForRendering(BeDescriptorSetLayout& setLayout, BeDescriptorPool& pool);
		std::vector<VkDescriptorSet> currentSet; //To use to draw
		std::vector<VkWriteDescriptorSet> writes; //to use to update what to draw

		bool initialized{ false };
		void createAndDestroyParticleSystem(float lifetime, glm::vec4 pos, glm::vec4 color, glm::vec4 vel, float particleSize);
		void Emit(glm::vec3 const& position, glm::vec3 const& direction, float speed, float spread, int count);
		void CreateFireParticles();
		/*
			Serialisation
		*/
		RTTR_ENABLE(IECSComponent)
		RTTR_REGISTRATION_FRIEND

	};
}
#endif